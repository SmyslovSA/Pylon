@using Pylon.Website.Extension
@model Pylon.Models.ProfileViewModel

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width" />
</head>

<div id="myModalBox" class="modal fade">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-body">
				@Resources.Resource.WrongImageSize
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">@Resources.Resource.CloseButton</button>
			</div>
		</div>
	</div>
</div>

<section id="car-list-area" class="section-padding">
	<div class="col-lg-12">
		<div class="row">
			<!-- Profile Avatar -->
			<div class="col-lg-4" style="padding-top:10px">
				<div class="editor-field">
					@using (Html.BeginForm("GhangeImage", "Profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
					{
						<div class="div-image">
							@if (Model.ImageMimeType == null)
							{
								<img src="/assets/img/no_image_profile.jpg" id="image" alt="">
							}
							else
							{
								<img src="@Url.Action("GetImage", "Profile", new { id = User.GetUserId() })" id="image" alt="" style="width:320px; height:320px" />
							}

							<div class="input-file-row-1">
								<div class="upload-file-container-text">
									<input type="file" name="uploadFile" class="photo" id="imgInput" style="width:320px; height:320px" hidden />
								</div>
							</div>
							<div class="login-form" style="background-color:white; padding:0px">
								<div class="log-btn">
									<button> @Resources.Resource.Save </button>
								</div>
							</div>
						</div>
					}
				</div>
			</div>
			<!-- Profile Avatar -->
			<!-- Profile Info -->
			<div class="col-lg-8">
				@using (Html.BeginForm("GhangePersonalData", "Profile", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
				{
					@Html.AntiForgeryToken()
					@Html.ValidationSummary(true, "", new { @class = "text-danger" })
					<div class="container">
						<div class="row">
							<div class="col-lg-7 col-md-8 m-auto" style="max-width:90%; flex-basis:90%;padding-top:10px">
								<div class="login-page-content">
									<div class="login-form">
										<h3>@Resources.Resource.PersonalData</h3>
										<form action="index.html">
											@Html.HiddenFor(m => m.ImageData)
											@Html.HiddenFor(m => m.ImageMimeType)
											<div class="username">
												@Html.TextBoxFor(m => m.FirstName, new { @autocomplete = "off", @placeholder = @Resources.Resource.Name, required = "required", oninvalid = $"this.setCustomValidity('{@Resources.Resource.NameRequired}')", oninput = "this.setCustomValidity('')", onkeypress = "return checkSpcialChar(event)" })
												@Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
											</div>
											<div class="username">
												@Html.TextBoxFor(m => m.LastName, new { @autocomplete = "off", @placeholder = @Resources.Resource.LastName, required = "required", oninvalid = $"this.setCustomValidity('{@Resources.Resource.LastNameRequired}')", oninput = "this.setCustomValidity('')", onkeypress = "return checkSpcialChar(event)" })
												@Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
											</div>
											<div class="username">
												@Html.TextBoxFor(m => m.Phone, new { @autocomplete = "off", @id = "phone", @placeholder = @Resources.Resource.Phone, required = "required" })
												@Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
											</div>
											<div class="log-btn">
												<button> @Resources.Resource.Save </button>
											</div>
										</form>
									</div>
								</div>
							</div>
						</div>
					</div>
				}
				@using (Html.BeginForm("ChangePassword", "Profile", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
				{
					@Html.AntiForgeryToken()
					<div class="container">
						<div class="row">
							<div class="col-lg-7 col-md-8 m-auto" style="max-width:90%; flex-basis:90%">
								<div class="login-page-content">
									<div class="login-form">
										<h3>@Resources.Resource.ChangePassword</h3>
										<form action="index.html">
											<div class="password">
												<input type="password" id="newPassword" name="newPassword" placeholder="@Resources.Resource.NewPassword" required pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,}" oninvalid="this.setCustomValidity('Passwords must be at least 6 characters. Passwords must have at least one digit. Passwords must have at least one uppercase.')" oninput="this.setCustomValidity(''), onkeypress = " return checkSpcialChar(event)"">
											</div>
											<div class="password">
												<input type="password" id="newPasswordConfirm" name="newPasswordConfirm" placeholder="@Resources.Resource.PasswordConfirm" required pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,}" oninput="check(this), onkeypress = " return checkSpcialChar(event)"">
											</div>
											<div class="log-btn">
												<button> @Resources.Resource.Save </button>
											</div>
										</form>
									</div>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
			<!--Profile info -->
		</div>
		<br>
		<br>
		<br>
	</div>
</section>
@Scripts.Render("~/bundles/jquery")
<script src="~/Scripts/jquery.maskedinput.js"></script>
<script>
	document.querySelector("#image").addEventListener("click", function () {
		var clickEvent = document.createEvent('MouseEvents');

		clickEvent.initMouseEvent('click', true, true, window,
			0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.querySelector("#imgInput").dispatchEvent(clickEvent);
	});
</script>

<script>
	$('#imgInput').bind('change', function () {
		if (this.files[0].size > 4 * 1024 * 1024) {
			$(function () {
				$('#myModalBox').modal('show');
			});
			this.value = "";
		}
	});
</script>


<script>
	$("#phone").mask("+375(99) 999-99-99");
</script>
<script>
	function check(input) {
		if (input.value != document.getElementById('newPassword').value) {
			input.setCustomValidity('@Resources.Resource.PasswordConfirmValidation');
		} else {
			input.setCustomValidity('');
		}
	}
</script>

<script>
	function checkSpcialChar(event) {
		if (event.key == '>' || event.key == '<') {
			event.returnValue = false;
			return;
		}
		event.returnValue = true;
	}
</script>