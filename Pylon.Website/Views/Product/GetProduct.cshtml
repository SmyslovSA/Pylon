@model Pylon.Models.ProductViewModel

<div id="myModalBox" class="modal fade">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-body">
				@Resources.Resource.WrongImageSize
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">@Resources.Resource.CloseButton</button>
			</div>
		</div>
	</div>
</div>

@using (Html.BeginForm("UpdateProduct", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true, "", new { @class = "text-danger" })
	<section id="login-page-wrap" class="section-padding">
		<div class="container">
			<div class="row">
				<div class="col-lg-7 col-md-8 m-auto">
					<div class="login-page-content">
						<div class="login-form">
							<h3>@Resources.Resource.UpdateCar</h3>
							<form action="index.html">
								@Html.HiddenFor(m => m.Id)
								<div class="username">
									@Html.TextBoxFor(m => m.Name, new { @placeholder = @Resources.Resource.Car, onkeypress = "return checkSpcialChar(event)" })
									@Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
								</div>
								<div class="username">
									@Html.TextBoxFor(m => m.CarModel, new { @placeholder = @Resources.Resource.Model, onkeypress = "return checkSpcialChar(event)" })
									@Html.ValidationMessageFor(m => m.CarModel, "", new { @class = "text-danger" })
								</div>
								<div class="username">
									@Html.TextBoxFor(m => m.Year, new { @min = 2000, @max = DateTime.Today.Year, @onkeypress = "validate(event)", @placeholder = @Resources.Resource.Year, @autocomplete = "off", @maxlength = 4 })
									@Html.ValidationMessageFor(m => m.Year, "", new { @class = "text-danger" })
								</div>
								<div class="username">
									@{
										Model.Price = (int)Model.Price;
									}
									@Html.TextBoxFor(m => m.Price, new { @onkeypress = "validate(event)", @placeholder = @Resources.Resource.Price })
									@Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
								</div>
								<div class="div-image">
									@if (Model.ImageMimeType == null)
									{
										<img src="/assets/img/no-car.png" id="image" alt="">
									}
									else
									{
										<img src="@Url.Action("GetImage", "Product", new { id = Model.Id })" id="image" alt="" />
									}
									<div class="input-file-row-1">
										<div class="upload-file-container-text">
											<input type="file" name="uploadFile" class="photo" id="imgInput" hidden />
										</div>
									</div>
								</div>
								<div class="log-btn">
									<button> @Resources.Resource.Save </button>
								</div>
							</form>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
}

@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")
}
@Scripts.Render("~/bundles/jquery")
<script>
	document.querySelector("#image").addEventListener("click", function () {
		var clickEvent = document.createEvent('MouseEvents');

		clickEvent.initMouseEvent('click', true, true, window,
			0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.querySelector("#imgInput").dispatchEvent(clickEvent);
	});
</script>

<script>
	function checkSpcialChar(event) {
		if (event.key == '>' || event.key == '<') {
			event.returnValue = false;
			return;
		}
		event.returnValue = true;
	}
</script>

<script>
	$('#imgInput').bind('change', function () {
		if (this.files[0].size > 4 * 1024 * 1024) {
			$(function () {
				$('#myModalBox').modal('show');
			});
			this.value = "";
		}
	});
</script>